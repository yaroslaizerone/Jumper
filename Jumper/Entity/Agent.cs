//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Jumper.Entity
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Agent
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Agent()
        {
            this.AgentPriorityHistory = new HashSet<AgentPriorityHistory>();
            this.ProductSale = new HashSet<ProductSale>();
            this.Shop = new HashSet<Shop>();
        }
    
        public int ID { get; set; }
        public int AgentTypeID { get; set; }
        public string Title { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
        public string Logo { get; set; }
        public string Address { get; set; }
        public int Priority { get; set; }
        public string DirectorName { get; set; }
        public string INN { get; set; }
        public string KPP { get; set; }
    
        public virtual AgentType AgentType { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<AgentPriorityHistory> AgentPriorityHistory { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductSale> ProductSale { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Shop> Shop { get; set; }

        public string AgentTypeThis 
        {
            get 
            { 
                return this.AgentType.Title.ToString();
            }
        }
        public string Img 
        {
            get 
            {
                return "\\res" + this.Logo.ToString();
            }
        }
        public int CountProductSale
        {
            get
            {
                var count = Classes.Entities.GetContext().ProductSale.Where(p => p.AgentID == this.ID && p.SaleDate.Year == 2019)
                    .Select(p => p.ProductCount).DefaultIfEmpty(0)
                    .Sum(); return count;
            }
        }
        public int GetProcent
        {
            get 
            {
                var count = Classes.Entities.GetContext().ProductSale
                    .Where(p => p.AgentID == this.ID);
                decimal cost = 0;
                foreach (ProductSale ps in count) 
                {
                    cost += ps.Product.MinCostForAgent * ps.ProductCount;
                }
                int procent = 0;
                if (cost >= 10000 && cost < 50000) procent = 5;
                if (cost >= 50000 && cost < 150000) procent = 10;
                if (cost >= 150000 && cost < 500000) procent = 20;
                if (cost >= 500000) procent = 25;
                return procent;
            }
        }
    }
}
